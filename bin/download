#!/usr/bin/env bash

set -euo pipefail

current_script_path=${BASH_SOURCE[0]}
plugin_dir=$(dirname "$(dirname "$current_script_path")")

# shellcheck source=./lib/utils.bash
source "${plugin_dir}/lib/utils.bash"

# Ensure download path exists
mkdir -p "$ASDF_DOWNLOAD_PATH"

# Get download URL, filename, and extension from the helper function
download_info=$(get_download_info "$ASDF_INSTALL_VERSION")
read -r download_url download_filename download_ext <<<"$download_info"

if [ -z "$download_url" ] || [ -z "$download_filename" ]; then
  fail "Could not determine download URL or filename for version $ASDF_INSTALL_VERSION."
fi

downloaded_file_path="$ASDF_DOWNLOAD_PATH/$download_filename"
final_bin_path="${ASDF_INSTALL_PATH}/bin" # Install directly into final bin dir

echo "* Downloading $TOOL_NAME $ASDF_INSTALL_VERSION from $download_url..."
curl "${curl_opts[@]}" -o "$downloaded_file_path" -C - "$download_url" || fail "Could not download $download_url"

# Handle extraction based on file extension
cleanup_archive=false
case "$download_ext" in
  ".tar.gz")
    echo "* Extracting $download_filename into $ASDF_DOWNLOAD_PATH..."
    # Extract directly into the download path, assuming binary is at the root
    tar -xzf "$downloaded_file_path" -C "$ASDF_DOWNLOAD_PATH" || fail "Could not extract archive $downloaded_file_path"
    cleanup_archive=true
    ;;
  "") # Raw binary (e.g., older Darwin versions)
    echo "* Downloaded raw binary $download_filename."
    # No extraction needed, the downloaded file is the executable.
    # It will be moved by install_version.
    ;;
  *)
    fail "Unsupported file extension: $download_ext"
    ;;
esac

# Clean up downloaded archive *if* it was extracted
if [ "$cleanup_archive" = true ]; then
  echo "* Cleaning up downloaded archive $downloaded_file_path..."
  rm "$downloaded_file_path"
fi

# Final placement and verification is handled by bin/install calling lib/utils.bash#install_version
echo "* $TOOL_NAME $ASDF_INSTALL_VERSION download complete. Ready for installation."
