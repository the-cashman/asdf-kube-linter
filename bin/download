#!/usr/bin/env bash

set -euo pipefail

current_script_path=${BASH_SOURCE[0]}
plugin_dir=$(dirname "$(dirname "$current_script_path")")

# shellcheck source=./lib/utils.bash
source "${plugin_dir}/lib/utils.bash"

# Ensure download path exists
mkdir -p "$ASDF_DOWNLOAD_PATH"

# Get download URL, filename, and extension from the helper function
download_info=$(get_download_info "$ASDF_INSTALL_VERSION")
read -r download_url download_filename download_ext <<<"$download_info"

if [ -z "$download_url" ] || [ -z "$download_filename" ]; then
  fail "Could not determine download URL or filename for version $ASDF_INSTALL_VERSION."
fi

downloaded_file_path="$ASDF_DOWNLOAD_PATH/$download_filename"
final_bin_path="${ASDF_INSTALL_PATH}/bin" # Install directly into final bin dir

echo "* Downloading $TOOL_NAME $ASDF_INSTALL_VERSION from $download_url..."
curl "${curl_opts[@]}" -o "$downloaded_file_path" -C - "$download_url" || fail "Could not download $download_url"

# Ensure the final bin directory exists
mkdir -p "$final_bin_path"

# Handle extraction/placement based on file extension
case "$download_ext" in
".tar.gz")
    echo "* Extracting $download_filename..."
    # Create a temporary directory for extraction
    temp_extract_dir="${ASDF_DOWNLOAD_PATH}/extracted"
    mkdir -p "$temp_extract_dir"

    # Extract the full archive content
    tar -xzf "$downloaded_file_path" -C "$temp_extract_dir" || fail "Could not extract archive $downloaded_file_path"

    # Find the kube-linter executable within the extracted contents
    # Search for a file named exactly TOOL_NAME and ensure it's executable
    found_executable=$(find "$temp_extract_dir" -type f -name "$TOOL_NAME" -executable -print -quit)

    if [ -z "$found_executable" ]; then
      # Fallback: maybe it wasn't marked executable in the archive? Find by name only.
      found_executable=$(find "$temp_extract_dir" -type f -name "$TOOL_NAME" -print -quit)
    fi

    if [ -z "$found_executable" ]; then
       fail "Could not find '$TOOL_NAME' executable within the extracted archive."
    fi

    echo "* Moving $found_executable to $final_bin_path/$TOOL_NAME"
    # Ensure it's executable before moving
    chmod +x "$found_executable" || fail "Could not make found binary executable"
    mv "$found_executable" "$final_bin_path/$TOOL_NAME" || fail "Could not move executable to final destination"

    # Clean up temporary extraction directory
    rm -rf "$temp_extract_dir"
    ;;
  "") # Raw binary (e.g., older Darwin versions)
  echo "* Moving raw binary $download_filename to $final_bin_path/$TOOL_NAME..."
  mv "$downloaded_file_path" "$final_bin_path/$TOOL_NAME" || fail "Could not move binary"
  chmod +x "$final_bin_path/$TOOL_NAME" || fail "Could not make binary executable"
  ;;
*)
  fail "Unsupported file extension: $download_ext"
  ;;
esac

# Clean up downloaded file
echo "* Cleaning up $downloaded_file_path..."
rm "$downloaded_file_path"

# Verification is handled by bin/install calling lib/utils.bash#install_version
echo "* $TOOL_NAME $ASDF_INSTALL_VERSION download and preparation complete."
