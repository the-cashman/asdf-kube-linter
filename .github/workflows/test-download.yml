name: Test Downloads

on:
  push:
    branches:
      - "*"
  pull_request:
  schedule:
    # Run weekly to catch any GitHub API or release format changes
    - cron: "0 0 * * 0"

jobs:
  # Test on all Linux x64 runners
  test_linux_x64:
    name: Test Linux x64 (${{ matrix.os }})
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - ubuntu-24.04
          - ubuntu-22.04
          - ubuntu-20.04
        # Test both newer versions (with 'v' prefix) and older versions (without 'v' prefix)
        version:
          - "0.7.2" # newer version with 'v' prefix
          - "0.2.0" # older version before 0.5.0 without 'v' prefix
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test download for version ${{ matrix.version }}
        shell: bash
        run: |
          # Set GITHUB_API_TOKEN for API rate limiting
          export GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }}

          # Run the download test script
          ./test_download.sh ${{ matrix.version }}

  # Test on all Windows x64 runners
  test_windows_x64:
    name: Test Windows x64 (${{ matrix.os }})
    strategy:
      matrix:
        os:
          - windows-latest
          - windows-2022
          - windows-2019
        version:
          - "0.7.2"
          - "0.2.0"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Bash on Windows
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64

      - name: Test download for version ${{ matrix.version }}
        shell: bash
        run: |
          # Set GITHUB_API_TOKEN for API rate limiting
          export GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }}

          # Run the download test script
          ./test_download.sh ${{ matrix.version }}

  # Test on Linux ARM64 runners (preview)
  test_linux_arm64:
    name: Test Linux ARM64 (${{ matrix.os }})
    strategy:
      matrix:
        os:
          - ubuntu-24.04-arm
          - ubuntu-22.04-arm
        version:
          - "0.7.2"
          - "0.2.0"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test download for version ${{ matrix.version }}
        shell: bash
        run: |
          # Set GITHUB_API_TOKEN for API rate limiting
          export GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }}

          # Run the download test script
          ./test_download.sh ${{ matrix.version }}

  # Test on Windows ARM64 runner (preview)
  test_windows_arm64:
    name: Test Windows ARM64
    strategy:
      matrix:
        version:
          - "0.7.2"
          - "0.2.0"
    runs-on: windows-11-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Bash on Windows
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: arm64

      - name: Test download for version ${{ matrix.version }}
        shell: bash
        run: |
          # Set GITHUB_API_TOKEN for API rate limiting
          export GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }}

          # Run the download test script
          ./test_download.sh ${{ matrix.version }}

  # Test on macOS Intel runner
  test_macos_intel:
    name: Test macOS Intel
    strategy:
      matrix:
        version:
          - "0.7.2"
          - "0.2.0"
    runs-on: macos-13
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test download for version ${{ matrix.version }}
        shell: bash
        run: |
          # Set GITHUB_API_TOKEN for API rate limiting
          export GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }}

          # Run the download test script
          ./test_download.sh ${{ matrix.version }}

  # Test on macOS ARM64 (M1) runners
  test_macos_arm64:
    name: Test macOS ARM64 (${{ matrix.os }})
    strategy:
      matrix:
        os:
          - macos-latest
          - macos-14
          - macos-15
        version:
          - "0.7.2"
          - "0.2.0"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test download for version ${{ matrix.version }}
        shell: bash
        run: |
          # Set GITHUB_API_TOKEN for API rate limiting
          export GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }}

          # Run the download test script
          ./test_download.sh ${{ matrix.version }}

  # Test all architectures on a single OS (simulated tests)
  test_all_architectures:
    name: Test all architectures (simulated)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test all architectures
        run: |
          # Set GITHUB_API_TOKEN for API rate limiting
          export GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }}

          # Run the download test script with all architectures
          ./test_download.sh --all-archs
